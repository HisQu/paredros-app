name: 'publish'

on:
  push:
    branches:
      - main

env:
  PYTHON_VERSION_FILE: .python-version

# This workflow will trigger on each push to the `release` branch to create or update a GitHub release, build your app, and upload the artifacts to the release.
jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest' # for Arm based macs (M1 and above).
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest' # for Intel based macs.
            args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-22.04'
            args: ''
          - platform: 'windows-latest'
            args: ''
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      # read the version early so every step can reuse it
      - name: Read python version
        shell: bash
        run: echo "PYTHON_VERSION=$(head -n1 ${{ env.PYTHON_VERSION_FILE }})" >> $GITHUB_ENV

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - uses: actions/setup-python@v5
        with:
          # pulls from the same file → no duplication
          python-version-file: ${{ env.PYTHON_VERSION_FILE }}

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Download Python embeddable DLL (Windows only)
        if: matrix.platform == 'windows-latest'
        shell: pwsh
        run: |
          # Read & parse the Python version
          $PY_VER_FULL      = (Get-Content .python-version | Select-Object -First 1).Trim()
          $ver              = [version]$PY_VER_FULL
          $PY_VER_MM_DIGITS = "$($ver.Major)$($ver.Minor)"    # e.g. "312"
          
          # Build URLs & paths
          $URL = "https://www.python.org/ftp/python/$PY_VER_FULL/python-$PY_VER_FULL-embed-amd64.zip"
          $dst = "src-tauri/py/windows"
          $tmpDir = "embed_tmp"
          
          # Prepare directories
          New-Item -Force -ItemType Directory $dst   | Out-Null
          Remove-Item -Force -Recurse $tmpDir -ErrorAction SilentlyContinue
          New-Item -Force -ItemType Directory $tmpDir | Out-Null
          
          # Download & extract to temp
          Invoke-WebRequest $URL -OutFile "$tmpDir\py.zip" -UseBasicParsing
          Expand-Archive "$tmpDir\py.zip" -DestinationPath $tmpDir -Force
          
          # Copy just the DLL
          $srcDll = Join-Path $tmpDir "python$PY_VER_MM_DIGITS.dll"
          Copy-Item -Force $srcDll -Destination $dst
          
          # Debug output: absolute path of the copied DLL
          $finalPath = (Resolve-Path (Join-Path $dst "python$PY_VER_MM_DIGITS.dll")).ProviderPath
          Write-Host "[DEBUG] → python DLL placed at:`n  $finalPath`n"
          
          # Cleanup temp files
          Remove-Item -Force -Recurse $tmpDir

      - name: install frontend dependencies
        run: yarn install

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: app-v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version.
          releaseName: 'App v__VERSION__'
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: true
          prerelease: false
          includeDebug: true
          args: ${{ matrix.args }}
