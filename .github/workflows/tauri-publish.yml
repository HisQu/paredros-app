name: 'publish'

on:
  push:
    branches:
      - main
      - test/deployment

# This workflow will trigger on each push to the `release` branch to create or update a GitHub release, build your app, and upload the artifacts to the release.

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest' # for Arm based macs (M1 and above).
            rust_target: aarch64-apple-darwin
            args: '--target aarch64-apple-darwin'
            exe_ext: ''
          - platform: 'macos-latest' # for Intel based macs.
            rust_target: x86_64-apple-darwin
            args: '--target x86_64-apple-darwin'
            exe_ext: ''
          - platform: 'ubuntu-22.04'
            rust_target: x86_64-unknown-linux-gnu
            exe_ext: ''
            args: ''
          - platform: 'windows-latest'
            rust_target: x86_64-pc-windows-msvc
            args: ''
            exe_ext: '.exe'
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      # ---- tooling --------------------------------------------------------
      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - uses: actions/setup-python@v5
        with: { python-version: '3.12' }

      - uses: actions/setup-java@v4           # antlr4-tools requires Java only at build time
        with:
          distribution: temurin
          java-version: '17'

      # ---- pip + PyInstaller ----------------------------------------------
      - name: Install Python deps
        run: |
          python -m pip install -U pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Freeze sidecar with PyInstaller
        shell: bash
        run: |
          pyinstaller src-python/__main__.py \
            --name paredros                      \
            --add-data "src-python${{ runner.os == 'Windows' && ';' || ':' }}." \
            --clean
          mkdir -p src-tauri/binaries
          cp "dist/paredros${{ matrix.exe_ext }}" \
            "src-tauri/binaries/paredros-py-${{ matrix.rust_target }}${{ matrix.exe_ext }}"

      - name: Copy python312.dll (Windows only)
        if: matrix.platform == 'windows-latest'
        shell: bash
        run: |
          # Find the location of python312.dll in the Python install directory
          PYTHON_DLL="$(python -c "import sys; print(sys.base_prefix)")/python312.dll"
          # Confirm the file exists
          if [ ! -f "$PYTHON_DLL" ]; then
          echo "python312.dll not found at $PYTHON_DLL"
          exit 1
          fi
          # Copy it next to your frozen exe
          cp "$PYTHON_DLL" "src-tauri/binaries/python312.dll"

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: install frontend dependencies
        run: yarn install # change this to npm, pnpm or bun depending on which one you use.

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: app-v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version.
          releaseName: 'App v__VERSION__'
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}
