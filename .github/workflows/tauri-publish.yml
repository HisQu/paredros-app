name: 'publish'

on:
  push:
    branches:
      - main
      - test/deployment

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest' # for Arm based macs (M1 and above).
            rust_target: aarch64-apple-darwin
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest' # for Intel based macs.
            rust_target: x86_64-apple-darwin
            args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-22.04'
            rust_target: x86_64-unknown-linux-gnu
            args: ''
          - platform: 'windows-latest'
            rust_target: x86_64-pc-windows-msvc
            args: ''
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - uses: actions/setup-python@v5
        with: { python-version: '3.12' }

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      # Create and pack Python venv per platform
      - name: Create Python venv and install dependencies
        run: |
          python -m venv venv
          source ${{ matrix.venv_dir }}/bin/activate || .\\${{ matrix.venv_dir }}\\Scripts\\activate
          python -m pip install -U pip
          pip install -r requirements.txt
        shell: bash

      # Optionally clean up venv to reduce size (strip cache, tests, etc)
      - name: Clean up venv (optional)
        run: |
          find ${{ matrix.venv_dir }} -type d -name "__pycache__" -exec rm -rf {} +
          find ${{ matrix.venv_dir }} -type d -name "tests" -exec rm -rf {} +
          rm -rf ${{ matrix.venv_dir }}/lib/python*/site-packages/pip
        shell: bash

      - name: Copy venv to tauri resources
        run: |
          mkdir -p src-tauri/binaries
          # Copy venv to a platform-specific directory for your Tauri bundle
          cp -r ${{ matrix.venv_dir }} src-tauri/binaries/venv-${{ matrix.rust_target }}
        shell: bash

      - name: install frontend dependencies
        run: yarn install

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: app-v__VERSION__
          releaseName: 'App v__VERSION__'
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}
