name: 'publish'

on:
  push:
    branches:
      - main
      - feature/ship-python

env:
  PYTHON_VERSION_FILE: .python-version

# This workflow will trigger on each push to the `release` branch to create or update a GitHub release, build your app, and upload the artifacts to the release.
jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest' # for Arm based macs (M1 and above).
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest' # for Intel based macs.
            args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-22.04'
            args: ''
          - platform: 'windows-latest'
            args: ''
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      # read the version early so every step can reuse it
      - name: Read python version
        id: pythonver
        run: echo "PYTHON_VERSION=$(head -n1 ${{ env.PYTHON_VERSION_FILE }})" >> $GITHUB_ENV

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - uses: actions/setup-python@v5
        with:
          # pulls from the same file â†’ no duplication
          python-version-file: ${{ env.PYTHON_VERSION_FILE }}

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Download Python embeddable (Windows only)
        if: matrix.platform == 'windows-latest'
        shell: pwsh
        run: |
          $PY_VER = "${{ env.PYTHON_VERSION }}"
          $URL = "https://www.python.org/ftp/python/$PY_VER/python-$PY_VER-embed-amd64.zip"
          $dst = "src-tauri/py/windows"
          New-Item -Force -ItemType Directory $dst | Out-Null
          Invoke-WebRequest $URL -OutFile py.zip
          Expand-Archive py.zip -DestinationPath $dst -Force
          Remove-Item py.zip
          (Get-Content "$dst/python312._pth").ForEach({
            if ($_ -match '^\s*import\s+site') { "# $_" } else { $_ }
          }) | Set-Content "$dst/python312._pth"

      - name: install frontend dependencies
        run: yarn install

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: app-v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version.
          releaseName: 'App v__VERSION__'
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}
